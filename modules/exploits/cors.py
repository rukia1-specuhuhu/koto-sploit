import requests
import json
from urllib.parse import urlparse
import time

class CORSScanner:
    def __init__(self):
        self.options = {
            "URL": "",
            "TIMEOUT": "10",
            "DELAY": "0",
            "COOKIE": "",
            "USER_AGENT": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "HEADERS": "",
            "ORIGIN": "",
            "CUSTOM_ORIGIN": "",
            "CHECK_METHODS": True,
            "CHECK_CREDENTIALS": True,
            "CHECK_HEADERS": True,
            "CHECK_WILDCARD": True,
            "CHECK_NULL": True,
            "CHECK_DOMAIN": True,
            "CHECK_SUBDOMAIN": True,
            "CHECK_HTTPS": True,
            "CHECK_HTTP": True,
            "FOLLOW_REDIRECTS": True,
            "VERIFY_SSL": False,
            "CHECK_ORIGIN_HEADER": True,
            "CHECK_THIRD_PARTY": True
        }
        
        self.methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"]
        
        self.sensitive_headers = [
            "Authorization",
            "Cookie",
            "Set-Cookie",
            "Token",
            "X-Api-Key",
            "X-CSRF-Token",
            "X-Requested-With",
            "X-Auth-Token",
            "JWT",
            "X-Forwarded-For",
            "X-Real-IP"
        ]
        
        self.malicious_origins = [
            "https://evil.com",
            "https://attacker.com",
            "https://malicious.net",
            "null",
            "https://evil-domain.com",
            "https://attacker-domain.org",
            "https://malicious-site.net"
        ]
    
    def set_option(self, key, value):
        self.options[key] = value
    
    def get_option(self, key):
        return self.options[key]
    
    def get_domain_info(self, url):
        parsed = urlparse(url)
        domain = parsed.netloc
        scheme = parsed.scheme
        
        if ':' in domain:
            domain = domain.split(':')[0]
        
        domain_parts = domain.split('.')
        if len(domain_parts) > 2:
            subdomain = domain_parts[0]
            main_domain = '.'.join(domain_parts[1:])
        else:
            subdomain = ""
            main_domain = domain
        
        return {
            "domain": domain,
            "scheme": scheme,
            "subdomain": subdomain,
            "main_domain": main_domain,
            "full_domain": f"{scheme}://{domain}"
        }
    
    def generate_origins(self, url):
        domain_info = self.get_domain_info(url)
        origins = []
        
        if self.get_option("CHECK_NULL"):
            origins.append("null")
        
        if self.get_option("CHECK_DOMAIN"):
            origins.append(domain_info["full_domain"])
        
        if self.get_option("CHECK_SUBDOMAIN") and domain_info["subdomain"]:
            origins.append(f"{domain_info['scheme']}://attacker-{domain_info['domain']}")
            origins.append(f"{domain_info['scheme']}://{domain_info['subdomain']}-attacker.{domain_info['main_domain']}")
        
        if self.get_option("CHECK_HTTP") and domain_info["scheme"] == "https":
            origins.append(f"http://{domain_info['domain']}")
        
        if self.get_option("CHECK_HTTPS") and domain_info["scheme"] == "http":
            origins.append(f"https://{domain_info['domain']}")
        
        if self.get_option("CUSTOM_ORIGIN"):
            origins.append(self.get_option("CUSTOM_ORIGIN"))
        
        for origin in self.malicious_origins:
            origins.append(origin)
        
        return origins
    
    def check_cors(self, url, origin, method="GET", headers=None, credentials=False):
        if headers is None:
            headers = {}
        
        headers["Origin"] = origin
        
        try:
            if method == "GET":
                response = requests.get(url, timeout=int(self.get_option("TIMEOUT")), headers=headers, verify=False, allow_redirects=self.get_option("FOLLOW_REDIRECTS"))
            elif method == "POST":
                response = requests.post(url, timeout=int(self.get_option("TIMEOUT")), headers=headers, verify=False, allow_redirects=self.get_option("FOLLOW_REDIRECTS"))
            elif method == "OPTIONS":
                response = requests.options(url, timeout=int(self.get_option("TIMEOUT")), headers=headers, verify=False, allow_redirects=self.get_option("FOLLOW_REDIRECTS"))
            else:
                response = requests.request(method, url, timeout=int(self.get_option("TIMEOUT")), headers=headers, verify=False, allow_redirects=self.get_option("FOLLOW_REDIRECTS"))
            
            cors_headers = {}
            for header in response.headers:
                if header.lower() in ["access-control-allow-origin", "access-control-allow-methods", 
                                      "access-control-allow-headers", "access-control-allow-credentials",
                                      "access-control-max-age", "access-control-expose-headers"]:
                    cors_headers[header] = response.headers[header]
            
            acao = cors_headers.get("Access-Control-Allow-Origin", "").lower()
            acac = cors_headers.get("Access-Control-Allow-Credentials", "").lower()
            
            is_vulnerable = False
            vuln_type = ""
            
            if self.get_option("CHECK_WILDCARD") and acao == "*":
                if acac != "true":
                    is_vulnerable = True
                    vuln_type = "Wildcard Origin without Credentials"
            
            if origin.lower() == acao:
                is_vulnerable = True
                vuln_type = "Origin Reflection"
            
            if "null" in origin.lower() and acao == "null":
                is_vulnerable = True
                vuln_type = "Null Origin Reflection"
            
            if credentials and acac == "true":
                is_vulnerable = True
                vuln_type = "Credentials Allowed"
            
            return {
                "vulnerable": is_vulnerable,
                "type": vuln_type,
                "headers": cors_headers,
                "status_code": response.status_code,
                "origin": origin,
                "method": method
            }
        
        except Exception as e:
            return {
                "vulnerable": False,
                "type": f"Error: {str(e)}",
                "headers": {},
                "status_code": 0,
                "origin": origin,
                "method": method
            }
    
    def check_methods(self, url, origin):
        results = []
        for method in self.methods:
            result = self.check_cors(url, origin, method)
            results.append(result)
        return results
    
    def check_credentials(self, url, origin):
        headers = {"Cookie": self.get_option("COOKIE")}
        return self.check_cors(url, origin, credentials=True, headers=headers)
    
    def check_headers(self, url, origin):
        results = []
        for header in self.sensitive_headers:
            headers = {header: "test-value"}
            result = self.check_cors(url, origin, headers=headers)
            results.append(result)
        return results
    
    def check_wildcard(self, url, headers, timeout):
        vulnerabilities = []
        
        test_headers = headers.copy()
        test_headers["Origin"] = "https://malicious.com"
        
        try:
            response = requests.get(
                url,
                headers=test_headers,
                timeout=timeout,
                verify=self.get_option("VERIFY_SSL"),
                allow_redirects=self.get_option("FOLLOW_REDIRECTS")
            )
            
            cors_headers = {}
            for header in response.headers:
                if header.lower().startswith("access-control-"):
                    cors_headers[header] = response.headers[header]
            
            if "Access-Control-Allow-Origin" in cors_headers:
                if cors_headers["Access-Control-Allow-Origin"] == "*":
                    vulnerabilities.append({
                        "type": "Wildcard Origin",
                        "cors_headers": cors_headers,
                        "description": "The server uses wildcard origin (*) which allows any domain to access resources"
                    })
        except:
            pass
        
        return vulnerabilities
    
    def check_null_origin(self, url, headers, timeout):
        vulnerabilities = []
        
        test_headers = headers.copy()
        test_headers["Origin"] = "null"
        
        try:
            response = requests.get(
                url,
                headers=test_headers,
                timeout=timeout,
                verify=self.get_option("VERIFY_SSL"),
                allow_redirects=self.get_option("FOLLOW_REDIRECTS")
            )
            
            cors_headers = {}
            for header in response.headers:
                if header.lower().startswith("access-control-"):
                    cors_headers[header] = response.headers[header]
            
            if "Access-Control-Allow-Origin" in cors_headers:
                if cors_headers["Access-Control-Allow-Origin"] == "null":
                    vulnerabilities.append({
                        "type": "Null Origin Allowed",
                        "cors_headers": cors_headers,
                        "description": "The server allows null origin which can be exploited from sandboxed iframes"
                    })
        except:
            pass
        
        return vulnerabilities
    
    def check_subdomains(self, url, headers, timeout):
        vulnerabilities = []
        
        parsed_url = urlparse(url)
        base_domain = parsed_url.netloc
        
        if "." in base_domain:
            parts = base_domain.split(".")
            if len(parts) > 2:
                subdomain = "test." + ".".join(parts[1:])
                test_headers = headers.copy()
                test_headers["Origin"] = f"https://{subdomain}"
                
                try:
                    response = requests.get(
                        url,
                        headers=test_headers,
                        timeout=timeout,
                        verify=self.get_option("VERIFY_SSL"),
                        allow_redirects=self.get_option("FOLLOW_REDIRECTS")
                    )
                    
                    cors_headers = {}
                    for header in response.headers:
                        if header.lower().startswith("access-control-"):
                            cors_headers[header] = response.headers[header]
                    
                    if "Access-Control-Allow-Origin" in cors_headers:
                        if cors_headers["Access-Control-Allow-Origin"] == f"https://{subdomain}":
                            vulnerabilities.append({
                                "type": "Subdomain Allowed",
                                "subdomain": subdomain,
                                "cors_headers": cors_headers,
                                "description": f"The server allows the subdomain '{subdomain}' which could be exploited"
                            })
                except:
                    pass
        
        return vulnerabilities
    
    def check_third_party(self, url, headers, timeout):
        vulnerabilities = []
        
        test_headers = headers.copy()
        test_headers["Origin"] = "https://trusted-third-party.com"
        
        try:
            response = requests.get(
                url,
                headers=test_headers,
                timeout=timeout,
                verify=self.get_option("VERIFY_SSL"),
                allow_redirects=self.get_option("FOLLOW_REDIRECTS")
            )
            
            cors_headers = {}
            for header in response.headers:
                if header.lower().startswith("access-control-"):
                    cors_headers[header] = response.headers[header]
            
            if "Access-Control-Allow-Origin" in cors_headers:
                if cors_headers["Access-Control-Allow-Origin"] == "https://trusted-third-party.com":
                    vulnerabilities.append({
                        "type": "Third-Party Allowed",
                        "third_party": "https://trusted-third-party.com",
                        "cors_headers": cors_headers,
                        "description": "The server allows a third-party domain which could be exploited if compromised"
                    })
        except:
            pass
        
        return vulnerabilities
    
    def run(self):
        url = self.get_option("URL")
        delay = int(self.get_option("DELAY"))
        timeout = int(self.get_option("TIMEOUT"))
        
        headers = {
            "User-Agent": self.get_option("USER_AGENT"),
            "Cookie": self.get_option("COOKIE")
        }
        
        if self.get_option("HEADERS"):
            try:
                for header in self.get_option("HEADERS").split("\\n"):
                    if ":" in header:
                        key, value = header.split(":", 1)
                        headers[key.strip()] = value.strip()
            except:
                pass
        
        origins = self.generate_origins(url)
        
        vulnerabilities = []
        
        for origin in origins:
            if delay > 0:
                time.sleep(delay)
            
            result = self.check_cors(url, origin, headers=headers)
            
            if result["vulnerable"]:
                vulnerabilities.append(result)
            
            if self.get_option("CHECK_METHODS"):
                method_results = self.check_methods(url, origin)
                for method_result in method_results:
                    if method_result["vulnerable"]:
                        vulnerabilities.append(method_result)
            
            if self.get_option("CHECK_CREDENTIALS"):
                cred_result = self.check_credentials(url, origin)
                if cred_result["vulnerable"]:
                    vulnerabilities.append(cred_result)
            
            if self.get_option("CHECK_HEADERS"):
                header_results = self.check_headers(url, origin)
                for header_result in header_results:
                    if header_result["vulnerable"]:
                        vulnerabilities.append(header_result)
        
        if self.get_option("CHECK_WILDCARD"):
            wildcard_vulns = self.check_wildcard(url, headers, timeout)
            vulnerabilities.extend(wildcard_vulns)
        
        if self.get_option("CHECK_NULL"):
            null_origin_vulns = self.check_null_origin(url, headers, timeout)
            vulnerabilities.extend(null_origin_vulns)
        
        if self.get_option("CHECK_SUBDOMAIN"):
            subdomain_vulns = self.check_subdomains(url, headers, timeout)
            vulnerabilities.extend(subdomain_vulns)
        
        if self.get_option("CHECK_THIRD_PARTY"):
            third_party_vulns = self.check_third_party(url, headers, timeout)
            vulnerabilities.extend(third_party_vulns)
        
        if vulnerabilities:
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} CORS vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            return {
                "success": True,
                "message": "No CORS vulnerabilities found"
            }
