import requests
import re
import random
import string
import time
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

class SessionHijackingScanner:
    def __init__(self):
        self.options = {
            "URL": "",
            "USERNAME": "",
            "PASSWORD": "",
            "LOGIN_URL": "",
            "LOGOUT_URL": "",
            "PROTECTED_URL": "",
            "TIMEOUT": "10",
            "DELAY": "1",
            "USER_AGENT": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "HEADERS": "",
            "COOKIE": "",
            "TEST_SESSION_FIXATION": True,
            "TEST_CSRF": True,
            "TEST_COOKIE_ATTRIBUTES": True,
            "TEST_SESSION_TIMEOUT": True,
            "TEST_HTTP_ONLY": True,
            "TEST_SECURE_FLAG": True,
            "TEST_SAME_SITE": True,
            "GENERATE_REPORT": True
        }
        
        self.session = requests.Session()
        self.session_headers = {
            "User-Agent": self.get_option("USER_AGENT")
        }
        
        self.vulnerabilities = []
        self.session_info = {}
        
        self.csrf_patterns = [
            r'csrf[_-]?token',
            r'csrf[_-]?param',
            r'authenticity[_-]?token',
            r'[_-]?token$',
            r'form[_-]?token',
            r'session[_-]?token',
            r'anti[_-]?csrf',
            r'xsrf[_-]?token'
        ]
        
        self.session_cookie_names = [
            'sessionid',
            'session',
            'sessid',
            'phpsessid',
            'aspsessionid',
            'jsessionid',
            'auth_token',
            'token',
            'access_token',
            'auth',
            'login_token'
        ]
    
    def set_option(self, key, value):
        self.options[key] = value
    
    def get_option(self, key):
        return self.options[key]
    
    def generate_random_string(self, length=10):
        return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
    
    def extract_csrf_token(self, response_text):
        soup = BeautifulSoup(response_text, 'html.parser')
        
        for pattern in self.csrf_patterns:
            regex = re.compile(pattern, re.IGNORECASE)
            
            meta_tags = soup.find_all('meta', attrs={'name': regex})
            if meta_tags:
                return meta_tags[0].get('content')
            
            input_tags = soup.find_all('input', attrs={'name': regex})
            if input_tags:
                return input_tags[0].get('value')
            
            hidden_inputs = soup.find_all('input', type='hidden')
            for inp in hidden_inputs:
                name = inp.get('name', '').lower()
                if any(pattern.search(name) for pattern in [re.compile(p, re.IGNORECASE) for p in self.csrf_patterns]):
                    return inp.get('value')
        
        return None
    
    def extract_form_data(self, response_text, form_action=None):
        soup = BeautifulSoup(response_text, 'html.parser')
        
        if form_action:
            form = soup.find('form', {'action': re.compile(form_action, re.IGNORECASE)})
        else:
            form = soup.find('form')
        
        if not form:
            return None, None
        
        action = form.get('action')
        if action:
            action = urljoin(self.get_option("URL"), action)
        else:
            action = self.get_option("URL")
        
        method = form.get('method', 'get').lower()
        
        form_data = {}
        inputs = form.find_all('input')
        for inp in inputs:
            name = inp.get('name')
            value = inp.get('value', '')
            if name:
                form_data[name] = value
        
        return action, method, form_data
    
    def login(self):
        url = self.get_option("LOGIN_URL") if self.get_option("LOGIN_URL") else self.get_option("URL")
        username = self.get_option("USERNAME")
        password = self.get_option("PASSWORD")
        
        if not username or not password:
            return False
        
        try:
            response = self.session.get(url, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            
            form_action, method, form_data = self.extract_form_data(response.text)
            
            if not form_action:
                form_action = url
                method = 'post'
                form_data = {}
            
            csrf_token = self.extract_csrf_token(response.text)
            if csrf_token:
                for pattern in self.csrf_patterns:
                    regex = re.compile(pattern, re.IGNORECASE)
                    for key in form_data:
                        if regex.search(key):
                            form_data[key] = csrf_token
                            break
            
            form_data['username'] = username
            form_data['password'] = password
            form_data['user'] = username
            form_data['pass'] = password
            form_data['login'] = 'Login'
            
            if method == 'post':
                response = self.session.post(form_action, data=form_data, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            else:
                response = self.session.get(form_action, params=form_data, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            
            if response.status_code == 200:
                return True
            
            return False
        except Exception:
            return False
    
    def test_session_fixation(self):
        if not self.get_option("TEST_SESSION_FIXATION"):
            return
        
        try:
            original_cookies = self.session.cookies.get_dict()
            
            new_session = requests.Session()
            new_session.headers = self.session_headers
            
            if self.get_option("COOKIE"):
                for cookie in self.get_option("COOKIE").split(";"):
                    if "=" in cookie:
                        name, value = cookie.split("=", 1)
                        new_session.cookies.set(name.strip(), value.strip())
            
            login_success = self.login()
            
            if login_success:
                new_cookies = new_session.cookies.get_dict()
                
                for cookie_name in self.session_cookie_names:
                    if cookie_name in original_cookies and cookie_name in new_cookies:
                        if original_cookies[cookie_name] == new_cookies[cookie_name]:
                            self.vulnerabilities.append({
                                "type": "Session Fixation",
                                "severity": "High",
                                "description": f"Session ID '{cookie_name}' did not change after login",
                                "cookie_name": cookie_name,
                                "cookie_value": original_cookies[cookie_name]
                            })
                            break
        except Exception:
            pass
    
    def test_csrf(self):
        if not self.get_option("TEST_CSRF"):
            return
        
        try:
            protected_url = self.get_option("PROTECTED_URL") if self.get_option("PROTECTED_URL") else self.get_option("URL")
            
            response = self.session.get(protected_url, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            
            form_action, method, form_data = self.extract_form_data(response.text)
            
            if not form_action:
                return
            
            csrf_token = self.extract_csrf_token(response.text)
            
            if not csrf_token:
                self.vulnerabilities.append({
                    "type": "Missing CSRF Token",
                    "severity": "Medium",
                    "description": "No CSRF token found in form",
                    "url": protected_url
                })
                return
            
            if method == 'post':
                response = self.session.post(form_action, data=form_data, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            else:
                response = self.session.get(form_action, params=form_data, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            
            if response.status_code == 200:
                self.vulnerabilities.append({
                    "type": "CSRF Vulnerability",
                    "severity": "High",
                    "description": "Form submission successful without proper CSRF validation",
                    "url": form_action
                })
        except Exception:
            pass
    
    def test_cookie_attributes(self):
        if not self.get_option("TEST_COOKIE_ATTRIBUTES"):
            return
        
        try:
            response = self.session.get(self.get_option("URL"), headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            
            cookies = response.cookies
            
            for cookie in cookies:
                if cookie.name.lower() in [name.lower() for name in self.session_cookie_names]:
                    if self.get_option("TEST_HTTP_ONLY") and not cookie.has_nonstandard_attr('httponly'):
                        self.vulnerabilities.append({
                            "type": "Missing HttpOnly Flag",
                            "severity": "Medium",
                            "description": f"Cookie '{cookie.name}' does not have HttpOnly flag set",
                            "cookie_name": cookie.name
                        })
                    
                    if self.get_option("TEST_SECURE_FLAG") and not cookie.secure:
                        self.vulnerabilities.append({
                            "type": "Missing Secure Flag",
                            "severity": "Medium",
                            "description": f"Cookie '{cookie.name}' does not have Secure flag set",
                            "cookie_name": cookie.name
                        })
                    
                    if self.get_option("TEST_SAME_SITE") and 'samesite' not in [attr.lower() for attr in cookie._rest.keys()]:
                        self.vulnerabilities.append({
                            "type": "Missing SameSite Attribute",
                            "severity": "Low",
                            "description": f"Cookie '{cookie.name}' does not have SameSite attribute set",
                            "cookie_name": cookie.name
                        })
        except Exception:
            pass
    
    def test_session_timeout(self):
        if not self.get_option("TEST_SESSION_TIMEOUT"):
            return
        
        try:
            timeout = 3600
            
            if self.get_option("LOGOUT_URL"):
                logout_url = self.get_option("LOGOUT_URL")
            else:
                protected_url = self.get_option("PROTECTED_URL") if self.get_option("PROTECTED_URL") else self.get_option("URL")
                response = self.session.get(protected_url, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
                _, _, form_data = self.extract_form_data(response.text)
                
                if form_data:
                    logout_url = protected_url
                else:
                    return
            
            time.sleep(5)
            
            response = self.session.get(logout_url, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
            
            if response.status_code == 200:
                protected_url = self.get_option("PROTECTED_URL") if self.get_option("PROTECTED_URL") else self.get_option("URL")
                response = self.session.get(protected_url, headers=self.session_headers, timeout=int(self.get_option("TIMEOUT")))
                
                if "login" in response.text.lower() or "sign in" in response.text.lower():
                    self.vulnerabilities.append({
                        "type": "Session Timeout",
                        "severity": "Low",
                        "description": f"Session timeout appears to be very short (less than 5 seconds)",
                        "timeout_seconds": 5
                    })
        except Exception:
            pass
    
    def run(self):
        url = self.get_option("URL")
        
        if not url:
            return {
                "success": False,
                "message": "URL is required"
            }
        
        if self.get_option("HEADERS"):
            try:
                for header in self.get_option("HEADERS").split("\\n"):
                    if ":" in header:
                        key, value = header.split(":", 1)
                        self.session_headers[key.strip()] = value.strip()
            except:
                pass
        
        if self.get_option("COOKIE"):
            try:
                for cookie in self.get_option("COOKIE").split(";"):
                    if "=" in cookie:
                        name, value = cookie.split("=", 1)
                        self.session.cookies.set(name.strip(), value.strip())
            except:
                pass
        
        if self.get_option("USERNAME") and self.get_option("PASSWORD"):
            self.login()
        
        self.test_session_fixation()
        self.test_csrf()
        self.test_cookie_attributes()
        self.test_session_timeout()
        
        if self.vulnerabilities:
            return {
                "success": True,
                "message": f"Found {len(self.vulnerabilities)} session security issues",
                "vulnerabilities": self.vulnerabilities
            }
        else:
            return {
                "success": True,
                "message": "No session security issues found"
            }
